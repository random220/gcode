umask 022 

if [[ ! -f ~/.inputrc ]]; then
  echo 'set bell-style none' >~/.inputrc
fi

export VISUAL=vi
export EDITOR=vi

pcomps=(
$HOME/.local/bin
$HOME/go/bin
$HOME/bin
$HOME/gcode/bin
$HOME/go/bin
$HOME/Library/Python/3.9/bin
/Library/Frameworks/Python.framework/Versions/3.10/bin
/snap/bin
/usr/local/sbin
/usr/local/bin
/usr/local/go/bin
/usr/sbin
/usr/bin
/sbin
/bin
/opt/homebrew/bin
)

PATH=
for p in ${pcomps[@]}; do
  if [[ -d $p ]]; then
    PATH="$PATH:$p"
  fi
done
PATH=$(echo "$PATH"|sed 's/^://')
export PATH
unset p
unset pcomps


alias vera='(veracrypt&)'
on_mint=0
if [[ -f /etc/lsb-release ]]; then
  grep -q 'DISTRIB_ID=LinuxMint' /etc/lsb-release
  if [[ $? == 0 ]]; then
    on_mint=1
  fi
fi
# if [[ $on_mint == 0 ]]; then
#   export LC_ALL=C
#   export LANG=C
# fi
unset on_mint

# export PS1="\[\e[31m\]\u@\h \w >\[\e[m\]\n% "
# Green prompt
# export PS1="\[\e[32m\]\u@\h \w >\n%\[\e[m\] "
# Bright Green
# export PS1="\[\e[01;32m\]\u@\h \w >\n%\[\e[m\] "
# Blue prompt
# export PS1="\[\e[34m\]\u@\h \w >\n%\[\e[m\] "
# Bright Blue prompt
# export PS1="\[\e[01;34m\]\u@\h \w >\n%\[\e[m\] "
# Magenta prompt
# export PS1="\[\e[01;35m\]\u@\h \w >\n%\[\e[m\] "
# Red prompt
# export PS1="\[\e[31m\]\u@\h \w >\[\e[m\]\n% "

# echo -e "\e[1m  BOLD   \e[0m"
# echo -e "\e[38;5;20m  BLUE   \e[0m"
# echo -e "\e[38;5;22m  GREEN   \e[0m"
# "\u@\h \w >\n% "   : The actual prompt 'om@om-Latitude-E7450 ~ '

export PS1="\e[1m\e[38;5;20m\u@\h \w >\e[0m\e[0m\n% "    # blue
export PS1="\e[1m\e[38;5;199m\u@\h \w >\e[0m\e[0m\n% "   # magenta
export PS1="\e[1m\e[38;5;40m\u@\h \w >\e[0m\e[0m\n% "    # green
export PS1="\e[1m\e[38;5;23m\u@\h \w >\e[0m\e[0m\n% "    # darker green
export PS1="\e[1m\e[38;5;56m\u@\h \w >\e[0m\e[0m\n% "    # nice blueish magenta
export PS1="\e[1m\e[38;5;199m\u@\h \w >\e[0m\e[0m\n% "   # magenta
export PS1="\e[1m\e[38;5;20m\u@\h \w >\e[0m\e[0m\n% "    # sulekha blue
alias ps1="echo export PS1=\''$PS1'\'"

export HISTTIMEFORMAT="%F %T "
export P4CONFIG=.p4config
export P4PORT=perforce:1666

if [[ $(uname) == Linux ]]; then
  alias ls='ls --color=auto'
else
  alias ls='ls -G'
fi
#alias ll="ls -altr --quoting-style=shell-escape"
alias ll="ls -altr"
alias cdp='cd -P'
alias vi=vim

alias rw='vimdiff ~/zr.txt ~/zw.txt'
alias lr='vimdiff ~/zl.txt ~/zr.txt'
alias lw='vimdiff ~/zl.txt ~/zw.txt'

alias glogn='echo|gh auth login; gh auth setup-git'
alias glog='git log --all --graph --pretty=format:'\''%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\'' --abbrev-commit --date=relative'
alias glog1='git log --graph --decorate --oneline'
alias glog2='git log --all --graph --decorate --oneline'
heads() {
    git pack-refs --all
    prefs="$(git rev-parse --show-toplevel)"/.git/packed-refs
    for ref in $(git rev-list --all --children|grep -v ' '); do
      grep $ref $prefs
    done
}
alias grel='git branch -r|grep origin/RELEASE|xargs git log --graph --decorate --oneline'
alias gl='git log --all --graph --pretty="%h %ad %Cred%d%Creset %an: %s" --date=short'
alias gconv='git config --local --bool core.bare false'
alias dfiles='git diff --name-status'

alias gdesc='git show --name-status'
alias gdescv='git log --summary -1 -M'
alias gs='git status -s'
alias vig='cp ~/gcode/sundry/viminfo-git.txt ~/.viminfo'
alias vip='cp ~/gcode/sundry/viminfo-p4.txt ~/.viminfo'
alias p4m='p4 diff=3 merge3 -r' # 'p4 help merge3' /path/to/base /path/to/theirs /path/to/yours

alias pp='enscript -2rG --colo=1 --line-numbers -p out.ps --highlight=python -c'

alias mp=multipass

gits()
{
#git config credential.helper store
git config --global credential.helper 'cache --timeout='$(( 5*60*60 )) # 5 hours
git config --global color.ui true
git config --global push.default matching
git config --global merge.conflictstyle diff3
git config --global user.email omandal@localhost
git config --global user.name "Om Mandal"
git config --global pull.rebase false
}

function gf0() {
    local dotgit=$(git rev-parse --show-toplevel)/.git
    local b=$(git branch|grep '\*'|sed 's/^.* //')
    local r=$(git rev-list -1 HEAD)
    echo $r >$dotgit/HEAD
    prefix=__b__${RANDOM}__
    n=0
    for rev in $(git rev-list --all --children|grep -v ' '); do
        git branch ${prefix}_$n $rev
        let n+=1
    done
    git branch|grep -v '\*'|grep -v $prefix|xargs -r git branch -D
    git tag|xargs -r git tag -d
    remote=$(git remote -v|grep '(fetch)'|awk '{print $2}')
    git remote rm origin
    git remote add origin $remote
    git fetch --all
    git branch |grep $prefix|xargs -r git branch -D
    git checkout -b $b --track origin/$b
}

function gf() {
    local top
    local headref
    local current_branch

    top=$(git rev-parse --show-toplevel)
    headref=$(git rev-list -1 HEAD)
    current_branch=$(git rev-parse --abbrev-ref HEAD)

    cd "$top"
    git pack-refs --all
    echo "$headref refs/heads/ref_$headref" >.git/packed-refs
    echo "ref: refs/heads/ref_$headref" >.git/HEAD
    git fetch --all
    git checkout --track origin/"$current_branch" && git branch -D "ref_$headref"
}

gf2() {
    local br0=$(git branch|grep '\*'|awk '{print $2}')
    local br=_branch_$(date +%s)
    git checkout -b $br
    git branch|grep -v '\*'|xargs -r git branch -D
    git tag|xargs -r git tag -d
    git fetch --all -p -f
    git checkout --track origin/$br0
    git branch -D $br
}

function gfresh() {
    local b=$(git branch|grep '^\*'|awk '{print $2}')
    git checkout $(git rev-parse HEAD) >/dev/null 2>&1
    git branch|grep -v '^\*'|xargs git branch -D
    git tag|xargs git tag -d
    (
    for bremote in $(git branch -r); do
        blocal=$(echo $bremote|sed 's/^origin\///; s/$/_OMOM/')
        echo "git branch $blocal $bremote"
    done
    )|bash -
    local o=$(git remote -v|grep '^origin'|grep '(fetch)$'|awk '{print $2}')
    git remote rm origin
    git remote add origin $o
    git fetch --all
    git branch|grep -v '^\*'|xargs git branch -D
    git checkout -b $b --track origin/$b
}
function glocal() {
    for branch in $(git branch -r|grep -v -- '->'|grep 'origin/'|sed 's/^  origin\///'); do
      git branch $branch origin/$branch
    done
    git remote rm origin
}

function t0
{
  local name=T0
  if [[ $1 != '' ]]; then
    name=$1
  fi
  local ls=$(tmux ls | grep "^${name}:" 2>/dev/null)
  if [[ $ls == '' ]]; then
    tmux new -s $name
  else
    # T0: 2 windows (created Sat Oct 21 18:35:33 2017) [139x51] (attached)
    tmux a -d -t $name
  fi
}

fing () 
{ 
    if [[ $1 == '' ]]; then
        return;
    fi;
    local _type;
    for _type in '' obj release;
    do
        local cmd="lxc list --format=csv user.fingerprint=${1}-$_type";
        local out=$(bash -c "$cmd");
        if [[ $out != '' ]]; then
            echo "$cmd";
            echo "$out";
            local container=$(echo "$out"|sed 's/,.*//');
            lxc exec $container su - b;
        fi;
    done
}


alias t1='t0 T1'
alias tls='tmux ls'
alias t='touch ~/a.txt; open ~/a.txt'
alias ovftool='/Applications/VMware\ OVF\ Tool/ovftool'
alias jl='LC_ALL=C.UTF-8 LANG=C.UTF-8 pipenv run jupyter lab --ContentsManager.allow_hidden=True'
alias vmr='"/Applications/VMware Fusion.app/Contents/Library/vmrun"'


alias sd1='ssh d1'
alias sd2='ssh d2'
alias sd='sd2'

alias prx='ssh -g -N -f vmwgitlab'
alias prk='kill $(ps uxw|grep '\''ssh -g -N -f vmwgitlab'\''|grep -v grep|awk '\''{print $2}'\'')'

alias a6='docker exec -ti 67ga bash'
alias a7='docker exec -ti 70ga bash'
alias a3='docker exec -ti 70u3 bash'
function dp() {
  local f=$1
  if [[ $f == '' ]]; then
    echo 'Need a file to copy'
    return 1
  fi
  local b=$(basename "$f")
  docker exec ub bash -c 'mkdir -p /home/om/aaa'
  docker cp "$f" ub:/home/om/aaa/"$b"
  docker exec ub bash -c 'chown -R om:om /home/om/aaa'
}

#export P4USER=omandal
alias plog='p4 -p perforce.crondite.com:1666 describe -s $1'
function phead() {
  vib=$1
  local d=$(mktemp -d)
  cp "$vib" $d/a.vib
  (
  cd $d
  ar x a.vib
  chmod 666 *
  local payload=$(egrep 'payload +name="' descriptor.xml|perl -pe 's/^.*<payload\s+name="//; s/".*//')
  od -b $payload | sed 1q | cut -d " " -f1-11
  cat $payload|gunzip - >payload.bin
  od -b payload.bin | sed 1q | cut -d " " -f1-11
  )
  rm -rf $d
}

function unix() {
  f="$1"
  if [[ -f "$f" ]]; then
    perl -i -pe 's/\cM//s' "$f"
  fi
}

function p() {
    if [[ "$1" != '' ]]; then
        docker cp "$1" ub:/home/om/_a
        docker exec -u om ub bash -c 'cd ~om; tesseract _a _a'
        docker cp ub:/home/om/_a.txt .
        vi _a.txt
    fi
}


alias op=afplay
