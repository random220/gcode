umask 022 

if [[ ! -f ~/.inputrc ]]; then
  echo 'set bell-style none' >~/.inputrc
fi

export VISUAL=vi
export EDITOR=vi

path_add_after() {
  local new="$1"
  local p=$( tr ':' $'\n' <<<"$PATH" | grep -v '^'$new'$' | tr $'\n' ':'| sed 's/:$//; s/^://')
  PATH="$p:$new"
}
path_add_before() {
  local new="$1"
  local p=$( tr ':' $'\n' <<<"$PATH" | grep -v '^'$new'$' | tr $'\n' ':'| sed 's/:$//; s/^://')
  PATH="$new:$p"
}
path_add() {
  path_add_after "$1"
}

set_path() {
  #set -x
  local pcomps=(
    $HOME/.local/bin
    $HOME/go/bin
    $HOME/bin
    $HOME/gcode/bin
    $HOME/go/bin
    /opt/conda/condabin
    $HOME/Library/Python/3.9/bin
    /snap/bin
    /usr/local/sbin
    /usr/local/bin
    /usr/local/go/bin
    /usr/sbin
    /usr/bin
    /sbin
    /bin
    /opt/homebrew/bin
  )

  local p
  for p in ${pcomps[@]}; do
    if [[ -d $p ]]; then
      path_add_after "$p"
    fi
  done
  export PATH
}

set_path
os=$(uname -o)
if [[ "$os" == 'Msys' ]]; then
  export PATH="$HOME/bin:$HOME/gcode/bin:/usr/bin/vendor_perl:/usr/bin/core_perl:/usr/local/bin:/usr/bin:/bin:/mingw64/bin:/clangarm64/bin:/mingw64/bin:/c/WINDOWS/system32:/c/WINDOWS:/c/WINDOWS/System32/Wbem:/c/WINDOWS/System32/WindowsPowerShell/v1.0:/c/WINDOWS/System32/OpenSSH:/c/Users/omandal/AppData/Local/Microsoft/WindowsApps"
fi

alias vera='(veracrypt&)'
on_mint=0
if [[ -f /etc/lsb-release ]]; then
  grep -q 'DISTRIB_ID=LinuxMint' /etc/lsb-release
  if [[ $? == 0 ]]; then
    on_mint=1
  fi
fi
# if [[ $on_mint == 0 ]]; then
#   export LC_ALL=C
#   export LANG=C
# fi
unset on_mint


color_bg() {
    local color=$1
    echo '\[\e[48;5;'$color'm\]'
}
color_fg() {
    local color=$1
    echo '\[\e[38;5;'$color'm\]'
}
color_reset() {
    echo '\[\e[0m\]'
}

colors=(
    '0:231 26:231 220:0'
    '0:231 220:0 26:231'
    '1:0 172:0 27:0'
    '6:0 29:0 165:0'
    '6:0 29:0 63:0'
    '6:0 29:0 79:0'
    '9:0 93:0 32:0'
    '9:0 93:232 226:0'
    '20:255 249:0 220:0'
    '21:0 27:0 75:0'
    '21:253 27:253 33:0'
    '21:253 231:0 197:0'
    '22:255 255:0 22:255'
    '25:0 110:0 239:15'
    '26:255 49:0 250:0'
    '26:255 49:0 141:0'
    '26:255 49:0 145:0'
    '26:255 49:0 147:0'
    '26:255 220:0 247:0'
    '27:231 231:0 27:231'
    '33:0 21:253 42:232'
    '39:0 30:255 44:0'
    '39:0 92:255 27:255'
    '39:0 92:255 145:0'
    '44:0 27:0 251:0'
    '44:0 27:255 226:0'
    '44:0 27:255 251:0'
    '83:0 34:0 207:0'
    '83:0 139:0 226:0'
    '87:0 20:255 99:231'
    '105:0 227:0 81:0'
    '111:232 63:253 111:232'
    '117:0 147:0 192:0'
    '129:0 145:0 204:0'
    '129:0 145:0 226:0'
    '129:0 145:0 82:0'
    '129:0 215:0 82:0'
    '160:255 231:0 160:255'
    '162:0 75:0 84:0'
    '165:0 32:0 81:0'
    '197:0 193:0 201:0'
    '197:0 231:0 21:253'
    '197:0 231:0 197:0'
    '201:0 154:0 27:255'
    '201:0 154:0 81:0'
    '208:0 231:0 40:0'
    '220:0 209:0 117:0'
    '231:0 21:253 226:0'
    '231:0 27:0 226:0'
    '237:0 240:0 101:0'
    '237:255 108:0 112:0'
    '237:255 108:0 118:0'
)

mkprompt() {
    local color="$1"                   # '33:253 21:253 42:232'
                                       # or '33 21 42'

    IFS=' ' read -r -a mycolors <<< "$color"
    local bg1=$(sed 's/:.*//' <<<"${mycolors[0]}")
    local fg1=$(sed 's/^.*://' <<<"${mycolors[0]}")
    if [[ $fg1 -eq $bg1 ]]; then
        fg1=0
    fi
    local bg2=$(sed 's/:.*//' <<<"${mycolors[1]}")
    local fg2=$(sed 's/^.*://' <<<"${mycolors[1]}")
    if [[ $fg2 -eq $bg2 ]]; then
        fg2=0
    fi
    local bg3=$(sed 's/:.*//' <<<"${mycolors[2]}")
    local fg3=$(sed 's/^.*://' <<<"${mycolors[2]}")
    if [[ $fg3 -eq $bg3 ]]; then
        fg3=0
    fi

    local hostname='\h'
    if [[ -f ~/.hostname ]]; then
        hostname=$(cat ~/.hostname)
    fi

    local x=$(color_bg $bg1)$(color_fg $fg1)' \u '$(color_bg $bg2)$(color_fg $bg1)''
    local y=$(color_bg $bg2)$(color_fg $fg2)" $hostname "$(color_bg $bg3)$(color_fg $bg2)''
    local z=$(color_bg $bg3)$(color_fg $fg3)' \w '$(color_reset)$(color_fg $bg3)''$(color_reset)'\n% '
    echo "$x$y$z"
}

mkmodelprompt() {
    local color="$1"
    local prompt=$(mkprompt "$color")
    prompt=$(perl -pe 's{\\\[}{}g; s{\\\]}{}g; s{\\e}{\\x1b}g; s{\\n}{}; s{\%}{}' 2>/dev/null <<<"$prompt")
    echo "$prompt"
}

fancies() {
    local len=${#colors[@]}
    local i
    local color
    local modelprompt

    local THIS=''
    if [[ -f ~/.config/fancy ]]; then
        color=$(cat ~/.config/fancy)
        modelprompt=$(mkmodelprompt "$color")
        THIS="THIS:\t${modelprompt}   -- '$color'"
    fi
    for (( i=0; i<$len; i++ )); do
        color=${colors[$i]}
        modelprompt=$(mkmodelprompt "$color")
        echo -e "${i}:\t${modelprompt}   -- '$color'"
        echo
    done
    if [[ $THIS != '' ]]; then
        echo -e "$THIS"
        echo
    fi
}
alias prompts=fancies


fancylist() {
    ~/gcode/sundry/powerline/prompt-combos.sh "$@"
}

getcolor() {
    local len
    local n
    local color

    # https://www.cyberciti.biz/faq/finding-bash-shell-array-length-elements/
    # len=${#colors[@]}
    # echo $len
    # for (( i=0; i<$len; i++)); do
    #     echo "${colors[$i]}"
    # done

    if [[ "$1" == '' ]]; then
        len=${#colors[@]}
        n=$( expr $RANDOM % $len)
        color="${colors[$n]}"
    elif [[ "$1" =~ ^[0-9]+$ ]]; then
        len=${#colors[@]}
        n=$( expr "$1" % $len)
        color="${colors[$n]}"
    else
        color="$1"
    fi
    echo "$color"
}

fancy() {
    local args="$*" # join args with spaces
    if [[ $args == 'off' ]]; then
        fancy_off
        return
    fi

    local color=$(getcolor "$args")
    local prompt=$(mkprompt "$color")
    export PS1="$prompt"

    mkdir -p ~/.config
    echo "$color" >~/.config/fancy
}
alias prompt=fancy


fancy_off () {
    local blue=20
    local magenta=199
    local bluemagenta=56
    local green=40
    local darkgreen=23

    # "\u@\h \w >\n% "   : The actual prompt 'om@om-Latitude-E7450 ~ '

    local color=$blue
    if [[ $LOGNAME == sm || $HOSTNAME == work ]]; then
        color=magenta
    fi

    local hostname='\h'
    if [[ -f ~/.hostname ]]; then
        hostname=$(cat ~/.hostname)
    fi

    export PS1=$(color_fg $color)'\u@'$hostname' \w >'$(color_reset)'\n% '
    alias ps1="echo export PS1=\''$PS1'\'"
    rm -f ~/.config/.fancy* ~/.config/fancy
}


if [[ -f ~/.config/fancy ]]; then
    fancy "$(cat ~/.config/fancy)"
else
    fancy_off
fi

function winps1() {
    type __git_ps1 >/dev/null 2>&1
    if [[ $? != 0 ]]; then
        if [[ -f /Library/Developer/CommandLineTools/usr/share/git-core/git-prompt.sh ]]; then
            . /Library/Developer/CommandLineTools/usr/share/git-core/git-prompt.sh
        fi
    fi
    local cmd=$(
    cat <<"EOF"
export PS1='\[\033]0;$TITLEPREFIX:$PWD\007\]\n\[\033[32m\]\u@\h \[\033[35m\]$MSYSTEM \[\033[33m\]\w\[\033[36m\]`__git_ps1`\[\033[0m\]\n$ '
EOF
    )
    if [[ "$1" == '-q' ]]; then
        :
    else
        echo "$cmd"
    fi
    eval "$cmd"
}

os=$(uname -o)
if [[ "$os" == 'Msys' ]]; then
    winps1 -q
fi



export HISTTIMEFORMAT="%F %T "
export P4CONFIG=.p4config
#export P4PORT=perforce:1666

if [[ $(uname) == Linux ]]; then
  alias ls='ls --color=auto'
elif [[ $(uname) == Darwin ]]; then
  alias ls='ls -G'
elif [[ $(uname) == Msys ]]; then
  alias ls='ls -F --color=auto --show-control-chars'
fi
#alias ll="ls -altr --quoting-style=shell-escape"
alias ll="ls -altr"
alias cdp='cd -P'
alias vi=vim

alias rw='vimdiff ~/zr.txt ~/zw.txt'
alias lr='vimdiff ~/zl.txt ~/zr.txt'
alias lw='vimdiff ~/zl.txt ~/zw.txt'


# In case there is not tac, here's my version
tacc() {
    if [[ "$1" != '' ]]; then
        cat -n "$@" | sort -nr | perl -pe 's/^\s*\d+\t//'
    else
        cat -n - | sort -nr | perl -pe 's/^\s*\d+\t//'
    fi
}

alias glogn='echo|gh auth login; gh auth setup-git'
alias glog='git log --all --graph --pretty=format:'\''%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\'' --abbrev-commit --date=relative'
alias glog1='git log --graph --decorate --oneline'
alias glog2='git log --all --graph --decorate --oneline'
nah () {
  local root=$(git rev-parse --show-toplevel 2>/dev/null)
  if [[ "$root" == '' ]]; then
    return 1
  fi
  git reset --hard
  if [ -d "$root/.git/rebase-apply" ] || [ -d "$root/.git/rebase-merge" ]; then
    git rebase --abort
  fi
  git reset --hard
  #git clean -df
  return 0
}
nahh () {
  nah && git clean -df
}

heads () 
{ 
    git pack-refs --all
    packed_refs_file='./packed-refs'
    if [[ ! -f "$packed_refs_file" ]]; then
        packed_refs_file="$(git rev-parse --show-toplevel)"/.git/packed-refs
    fi
    if [[ ! -f "$packed_refs_file" ]]; then
        echo "Error: Could not find packed-refs file"
        return 1
    fi
    ( for ref in $(git rev-list --all --children|grep -v ' ')
    do
        refnames=$(grep $ref $packed_refs_file|sed 's/^.* //'|sort|xargs)
        if [[ $refnames != '' ]]; then
            refdate=$(git log -1 --pretty=format:'%cs' $ref)
            echo "$refdate $ref $refnames"
        fi
    done ) | sort -nr
}

alias grel='git branch -r|grep origin/RELEASE|xargs git log --graph --decorate --oneline'
alias gl='git log --all --graph --pretty="%h %ad %Cred%d%Creset %an: %s" --date=short'
alias gconv='git config --local --bool core.bare false'
alias dfiles='git diff --name-status'

alias gdesc='git show --name-status'
alias gdescv='git log --summary -1 -M'
alias gs='git status -s'
alias vig='cp ~/gcode/sundry/viminfo-git.txt ~/.viminfo'
alias vip='cp ~/gcode/sundry/viminfo-p4.txt ~/.viminfo'
alias p4m='p4 diff=3 merge3 -r' # 'p4 help merge3' /path/to/base /path/to/theirs /path/to/yours

alias pp='enscript -2rG --colo=1 --line-numbers -p out.ps --highlight=python -c'

alias mp=multipass

gits()
{
#git config credential.helper store
git config --global credential.helper 'cache --timeout='$(( 5*60*60 )) # 5 hours
git config --global color.ui true
git config --global push.default matching
git config --global merge.conflictstyle diff3
git config --global user.email omandal@localhost
git config --global user.name "Om Mandal"
git config --global pull.rebase false
}

function gf0() {
    local dotgit=$(git rev-parse --show-toplevel)/.git
    local b=$(git branch|grep '\*'|sed 's/^.* //')
    local r=$(git rev-list -1 HEAD)
    echo $r >$dotgit/HEAD
    prefix=__b__${RANDOM}__
    n=0
    for rev in $(git rev-list --all --children|grep -v ' '); do
        git branch ${prefix}_$n $rev
        let n+=1
    done
    git branch|grep -v '\*'|grep -v $prefix|xargs -r git branch -D
    git tag|xargs -r git tag -d
    remote=$(git remote -v|grep '(fetch)'|awk '{print $2}')
    git remote rm origin
    git remote add origin $remote
    git fetch --all
    git branch |grep $prefix|xargs -r git branch -D
    git checkout -b $b --track origin/$b
}

function gf() {
    local top
    local headref
    local current_branch

    top=$(git rev-parse --show-toplevel)
    headref=$(git rev-list -1 HEAD)
    current_branch=$(git rev-parse --abbrev-ref HEAD)

    cd "$top"
    git pack-refs --all
    echo "$headref refs/heads/ref_$headref" >.git/packed-refs
    echo "ref: refs/heads/ref_$headref" >.git/HEAD
    git fetch --all
    git checkout --track origin/"$current_branch" && git branch -D "ref_$headref"
}

gf2() {
    local br0=$(git branch|grep '\*'|awk '{print $2}')
    local br=_branch_$(date +%s)
    git checkout -b $br
    git branch|grep -v '\*'|xargs -r git branch -D
    git tag|xargs -r git tag -d
    git fetch --all -p -f
    git checkout --track origin/$br0
    git branch -D $br
}

function gfresh() {
    local b=$(git branch|grep '^\*'|awk '{print $2}')
    git checkout $(git rev-parse HEAD) >/dev/null 2>&1
    git branch|grep -v '^\*'|xargs git branch -D
    git tag|xargs git tag -d
    (
    for bremote in $(git branch -r); do
        blocal=$(echo $bremote|sed 's/^origin\///; s/$/_OMOM/')
        echo "git branch $blocal $bremote"
    done
    )|bash -
    local o=$(git remote -v|grep '^origin'|grep '(fetch)$'|awk '{print $2}')
    git remote rm origin
    git remote add origin $o
    git fetch --all
    git branch|grep -v '^\*'|xargs git branch -D
    git checkout -b $b --track origin/$b
}
function glocal() {
    for branch in $(git branch -r|grep -v -- '->'|grep 'origin/'|sed 's/^  origin\///'); do
      git branch $branch origin/$branch
    done
    git remote rm origin
}

function t0
{
  local name=T0
  if [[ $1 != '' ]]; then
    name=$1
  fi
  local ls=$(tmux ls | grep "^${name}:" 2>/dev/null)
  if [[ $ls == '' ]]; then
    tmux -2 new -s $name
  else
    # T0: 2 windows (created Sat Oct 21 18:35:33 2017) [139x51] (attached)
    tmux -2 a -d -t $name
  fi
}

fing () 
{ 
    if [[ $1 == '' ]]; then
        return;
    fi;
    local _type;
    for _type in '' obj release;
    do
        local cmd="lxc list --format=csv user.fingerprint=${1}-$_type";
        local out=$(bash -c "$cmd");
        if [[ $out != '' ]]; then
            echo "$cmd";
            echo "$out";
            local container=$(echo "$out"|sed 's/,.*//');
            lxc exec $container su - b;
        fi;
    done
}


alias t1='t0 T1'
alias tls='tmux ls'
alias t='touch ~/a.txt; open ~/a.txt'
alias ovftool='/Applications/VMware\ OVF\ Tool/ovftool'
alias jl='LC_ALL=C.UTF-8 LANG=C.UTF-8 pipenv run jupyter lab --ContentsManager.allow_hidden=True'
alias vmr='"/Applications/VMware Fusion.app/Contents/Library/vmrun"'


alias sd1='ssh d1'
alias sd2='ssh d2'
alias sd='sd2'

alias prx='ssh -g -N -f vmwgitlab'
alias prk='kill $(ps uxw|grep '\''ssh -g -N -f vmwgitlab'\''|grep -v grep|awk '\''{print $2}'\'')'

alias a6='docker exec -ti 67ga bash'
alias a7='docker exec -ti 70ga bash'
alias a3='docker exec -ti 70u3 bash'
function dp() {
  local f=$1
  if [[ $f == '' ]]; then
    echo 'Need a file to copy'
    return 1
  fi
  local b=$(basename "$f")
  docker exec ub bash -c 'mkdir -p /home/om/aaa'
  docker cp "$f" ub:/home/om/aaa/"$b"
  docker exec ub bash -c 'chown -R om:om /home/om/aaa'
}

#export P4USER=omandal
alias plog='p4 -p perforce.crondite.com:1666 describe -s $1'
function phead() {
  vib=$1
  local d=$(mktemp -d)
  cp "$vib" $d/a.vib
  (
  cd $d
  ar x a.vib
  chmod 666 *
  local payload=$(egrep 'payload +name="' descriptor.xml|perl -pe 's/^.*<payload\s+name="//; s/".*//')
  od -b $payload | sed 1q | cut -d " " -f1-11
  cat $payload|gunzip - >payload.bin
  od -b payload.bin | sed 1q | cut -d " " -f1-11
  )
  rm -rf $d
}

function unix() {
  f="$1"
  if [[ -f "$f" ]]; then
    perl -i -pe 's/\cM//s' "$f"
  fi
}

function p() {
    if [[ "$1" != '' ]]; then
        docker cp "$1" ub:/home/om/_a
        docker exec -u om ub bash -c 'cd ~om; tesseract _a _a'
        docker cp ub:/home/om/_a.txt .
        vi _a.txt
    fi
}

function b64() {
cat <<'EOF'
# perl -MMIME::Base64 -ne 'print encode_base64($_)' allusers.txt > outputfile.txt
# perl -MMIME::Base64 -ne 'print decode_base64($_)' outputfile.txt >a.txt
EOF
}


alias op=afplay
alias wh='time whisp -m lv2'
