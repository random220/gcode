#!/usr/bin/perl
use strict;
use Data::Dumper;

=head aa
    | 1        | 1|1 Basic Concepts of Algebra 18
    | 1.1      | 2|    The Language of Algebra 19
    | 1.1.1    | 3|        1-1 Real Numbers and Their Graphs 1 19
    | 1.1.2    | 4|        1-2 Simplifying Expressions 6 100
    | 1.2      | 5|    Operating with Real Numbers 100
    | 1.2.1    | 6|        1-3 Basic Properties of Real Numbers 14 100
    | 1.2.2    | 7|        1-4 Sums and Differences 21 100
    | 1.2.3    | 8|        1-5 Products 27 100
    | 1.2.4    | 9|        1-6 Quotients 33 100
    | 1.3      |10|    Solving Equations and Solving Problems 100
    | 1.3.1    |11|        1-7 Solving Equations in One Variable 37 100
    | 1.3.2    |12|        1-8 Words into Symbols 43 100
    | 1.3.3    |13|        1-9 Problem Solving with Equations 49 100
    | 2        |14|* Explorations: Exploring Irrational Numbers 832 100
    | 3        |15|* Technology 100

=cut

my $newlines = {};
my $newlines2 = {};
sub main
{
    if (scalar @ARGV == 0) {
        print("$0 {index.txt file}\n");
        exit(1);
    }
    open F, "<$ARGV[0]" or die;
    my @lines = <F>;
    close F;
    checkformat(\@lines);
    @lines = map {s/\s*$//s; $_} @lines;
    @lines = grep {$_ !~ /^\s*$/} @lines;


    $newlines->{0}->{'count'} = 0;
    my $n = 0;
    for my $line (@lines) {
        $n++;
        my ($space, $content) = $line =~ m{^(\s*)(.*)$};
        my $level = int(length($space)/4);
        my $tag = nextag($level, $n);
        $newlines->{$n} = {'tag' => $tag, 'line' => $line};
    }
    for my $n (sort {$a <=> $b} keys %$newlines) {
        my $tag = $newlines->{$n}->{'tag'};
        my $line = $newlines->{$n}->{'line'};
        #printf("\%-10s %s\n", $tag, $line);
        # '.1.3.3' '$newlines2->{1}->{3}->{3}'
        my @n = split /\./, $tag;
        shift @n;
        my $p = $newlines2;
        for my $x (@n) {
            if (!exists $p->{$x}) {
                $p->{$x} = {};
            }
            $p = $p->{$x};
        }
        $p->{'line'} = $line;
        $p->{'tag'} = $tag;
    }
    printhash($newlines2);
}
sub printhash
{
    my $h = shift;
    my $tag = $h->{'tag'};
    my $line = $h->{'line'};
    my @children = keys %$h;
    @children = grep {$_ !~ /^tag$/} @children;
    @children = grep {$_ !~ /^line$/} @children;
    @children = sort {$a <=> $b} @children;
    my $nchild = scalar @children;
    my ($space, $title, $page) = $line =~ m{^(\s*)(.+)\s+(\d+)$};
    if ($title ne '') {
        if ($nchild == 0) {
            print("$space\[/Page $page /Title ($title) /OUT pdfmark\n");
        }
        else {
            print("$space\[/Count $nchild /Page $page /Title ($title) /OUT pdfmark\n");
        }
    }

    for my $child (@children) {
        printhash($h->{$child});
    }
}

{
my $tags;
my $lastevel;
my $lastlevel;
sub nextag
{
    my ($level, $line_num) = @_;

    if (! defined $tags) {
        $tags = {};
        $tags->{-1} = '';
        $lastlevel = -1;
    }
    if ($level > $lastlevel) {
        my $tag = $tags->{$lastlevel}.'.1';
        $tags->{$level} = $tag;
        $lastlevel = $level;
        return $tag;
    }
    elsif ($level == $lastlevel) {
        my $tag = $tags->{$lastlevel};
        my ($pre, $post) = $tag =~ m{^(.+)(\d+)$};
        $post += 1;
        $tag = "${pre}${post}";
        $tags->{$level} = $tag;
        $lastlevel = $level;
        return $tag;
    }
    elsif ($level < $lastlevel) {
        my $tag = $tags->{$level};
        my ($pre, $post) = $tag =~ m{^(.+)(\d+)$};
        $post += 1;
        $tag = "${pre}${post}";
        $tags->{$level} = $tag;
        $lastlevel = $level;
        return $tag;
    }
}
}

sub checkformat
{
    my $lines = shift;
}

main();
