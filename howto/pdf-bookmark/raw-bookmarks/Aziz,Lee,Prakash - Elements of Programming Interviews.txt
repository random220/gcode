Cover 1*
Contents 6*
_offset 13
Introduction 1
I The Interview 6
1 Getting Ready 7
2 Strategies For A Great Interview 13
3 Conducting An Interview 20
4 Problem Solving 24

II Problems 43

5 Primitive Types 44
    5.1 Computing the parity of a word 45
    5.2 Swap bits 48
    5.3 Reverse bits 49
    5.4 Find a closest integer with the same weight 50
    5.5 Compute xx y without arithmetical operators 51
    5.6 Compute x/y 52
    5.7 Compute xl 53
    5.8 Reverse digits 54
    5.9 Check if a decimal integer is a palindrome 55
    5.10 Generate unitorm random numbers 56
    5.11 Rectangle intersection 57

6 Arrays 60
    6.1 The Dutch national flag problem 61
    6.2 Increment an arbitrary-precision integer 65
    6.3  Multiply two arbitrary-precision integers 65
    6.4  Advancing through an array 67
    6.5  Delete duplicates from a sorted array 68
    6.6  Buy and sell a stock once 69
    6.7  Buy and sell a stock twice 70
    6.8  Enumerate all primes to n 71
    6.9  Permute the elements of an array 73
    6.10 Compute the next permutation 75
    6.11 Sample offline data 77
    6.12 Sample online data 78
    6.13 Compute a random permutation 80
    6.14 Compute a random subset 81
    6.15 Generate nonuniform random numbers 82
    6.16 The Sudoku checker problem 84
    6.17 Compute the spiral ordering of a 2D array 86
    6.18 Rotate a 2D array 89
    6.19 Compute rows in Pascal's Triangle 91

7 Strings 93
    7.1  Interconvert strings and integers 94
    7.2  Base conversion 95
    7.3  Compute the spreadsheet column encoding 97
    7.4  Replace and remove 97
    7.5  Test palindromicity 99
    7.6  Reverse all the words in a sentence 100
    7.7  Compute all mnemonics for a phone number 101
    7.8  The look-and-say problem 103
    7.9  Convert from Roman to decimal 104
    7.10 Compute all valid IP addresses 105
    7.11 Write a string sinusoidally 106
    7.12 Implement run-length encoding 107
    7.13 Find the first occurrence of a substring 108

8 Linked Lists 110
    8.1  Merge two sorted lists 112
    8.2  Reverse a single sublist 113
    8.3  Test for cyclicity 115
    8.4  Test for overlapping lists lists are cycle-free 116
    8.5  Test for overlapping lists- lists may have cycles 118
    8.6  Delete a node from a singly linked list 119
    8.7  Remove the kth last element from a list 120
    8.8  Remove duplicates from a sorted list 121
    8.9  Implement cyclic right shift for singly linked lists 122
    8.10 Implement even-odd merge 123
    8.11 Test whether a singly linked list is palindromic 124
    8.12 Implement list pivoting 125
    8.13 Add list-based integers 126

9 Stacks and Queues 128
    9.1 Implement a stack with max API 129
    9.2 Evaluate RPN expressions 132
    9.3 Test a string over "{,},(,),[,]"for well-formedness 134
    9.4 Normalize pathnames 135
    9 5 Search a postings list 136
    9.6 Compute buildings with a sunset view 137
    9.7 Compute binary tree nodes in order of increasing depth 140
    9.8 Implement a circular queue 142
    9.9 Implement a queue using stacks 143
    9.10 Implement a queue with max API 144

10 Binary Trees 147
    10.1 Test if a binary tree is height-balanced 149
    10.2 Test if a binary tree is symmetric 151
    10.3 Compute the lowest common ancestor in a binary tree 152
    10.4 Compute the LCA when nodes have parent pointers 154
    10.5 Sum the root-to-leaf paths in a binary tree 155
    10.6 Find a root to leaf path with specified sum 156
    10.7 Implement an inorder traversal without recursion 157
    10.8 Implement a preorder traversal without recursion 158
    10.9 Compute the kth node in an inorder traversal 159
    10.10 Compute the successor 160
    10.11 Implement an inorder traversal with O(1) space 161
    10.12 Reconstruct a binary tree from traversal data 162
    10.13 Reconstruct a binary tree from a preorder traversal with markers 164
    10.14 Form a linked list from the leaves of a binary tree 165
    10.15 Compute the exterior of a binary tree 166
    10.16 Compute the right sibling tree 168
    10.17 Implement locking in a binary tree 170

11 Heaps 173
    11.1 Merge sorted files 175
    11.2 Sort an increasing-decreasing array 177
    11.3 Sort an almost-sorted array 178
    11.4 Compute the k closest stars 179
    11.5 Compute the median of online data 180
    11.6 Compute the k largest elements in a max-heap 182
    11.7 Implement a stack API using a heap 183

12 Searching 185
    12.1 Search a sorted array for first occurrence of k 188
    12.2 Search a sorted array for entry equal to its index 189
    12.3 Search a cyclically sorted array 190
    12.4 Compute the integer square root 192
    12.5 Compute the real square root 193
    12.6 Search in a 2D sorted array 194
    12.7 Find the min and max simultaneously 196
    12.8 Find the kth largest element 197
    12.9 Find the missing IP address 200
    12.10 Find the duplicate and missing elements 201

13 Hash Tables 205
    13.1 Test for palindromic permutations 210
    13.2 Is an anonymous letter constructible? 211
    13.3 Implement an ISBN cache 212
    13.4 Compute the [CA, optimizing for close ancestors 214
    13.5 Compute the k most frequent queries 215
    13.6 Find the nearest repeated entries in an array 215
    13.7 Find the smallest subarray covering all values 216
    13.8 Find smallest subarray sequentially covering all values 220
    13.9 Find the longest subarray with distinct entries 222
    13.10 Find the length of a longest contained interval 223
    13.11 Compute the average of the top three scores 225
    13.12 Compute all string decompositions 226
    13.13 Test the Collatz conjecture 228
    13.14 Implement a hash function for chess 229

14 Sorting 231
    14.1 Compute the intersection of two sorted arrays 233
    14.2 Merge two sorted arrays 235
    14.3 Remove first-name duplicates 236
    14.4 Render a calendar 237
    14.5 Merging intervals 239
    14.6 Compute the union of intervals 241
    14.7 Partitioning and sorting an array with many repeated entries 243
    14.8 Team photo day 1 245
    14.9 Implement a fast sorting algorithm for lists 246
    14.10 Compute a salary threshold 248

15 Binary Search Trees 250
    15.1 Test if a binary tree satisfies the BST property 252
    15.2 Find the first key greater than a given value in a BST 255
    15.3 Find the k largest elements in a BST 255
    15.4 Compute the LCA in a BST 257
    15.5 Reconstruct a BST from traversal data 258
    15.6 Find the closest entries in three sorted arrays 261
    15.7 Enumerate numbers of the form a + b2^(1/2) 262
    15.8 The most visited pages problem 265
    15.9 Build a minimum height BST from a sorted array 266
    15.10 Insertion and deletion in a BST 267
    15.11 Test if three BST nodes are totally ordered 270
    15.12 The range lookup problem 271
    15.13 Add credits 274

16 Recursion 277
    16.1 The Towers of Hanoi problem. 278
    16.2 Generate all nonattacking placements of -Queens 280
    16.3 Generate permutations 282
    16.4 Generate the power set 284
    16.5 Generate all subsets of size k. 286
    16.6 Generate strings of matched parens 287
    16.7 Generate palindromic decomposition 288
    16.8 Generate binary trees 290
    16.9 Implement a Sudoku solver 291
    16.10 Compute a Gray code 293
    16.11 Compute the diameter of a tree 295

17 Dynamic Programming 298
    17.1 Count the number of score combinations 301
    17.2 Compute the Levenshtein distance 304
    17.3 Count the number of ways to traverse a 2D array 307
    17.4 Compute the binomial coefficients 309
    17.5 Search for a sequence in a 2D array 310
    17.6 The knapsack problem 312
    17.7 The bedbathandbeyond.com problem 315
    17.8 Find the minimum weight path in a triangle 318
    17.9 Pick up coins for maximum gain 319
    17.10 Count the number of moves to climb stairs 321
    17.11 The pretty printing problem. 322
    17.12 Find the longest nondecreasing subsequence 325

18 Greedy Algorithms and Invariants 328
    18.1 Compute an optimum assignment of tasks 329
    18.2 Schedule to minimize waiting time 330
    18.3 The interval covering problem 331
    18.4 The 3-sum problem 334
    18.5 Find the majority element 336
    18.6 The gasup problem. 337
    18.7 Compute the maximum water trapped by a pair of vertical lines 339
    18.8 Compute the largest rectangle under the skyline 341

19 Graphs 344
    19.1 Search a maze 348
    19.2 Paint a Boolean matrix 351
    19.3 Compute enclosed regions 353
    19.4 Deadlock detection 355
    19.5 Clone a graph 357
    19.6 Making wired connections 358
    19.7 Transform one string to another 360
    19.8 Team photo day-2 363
    19.9 Compute a shortest path with fewest edges 364

20 Parallel Computing 367
    20.1 Implement caching for a multithreaded dictionary 369
    20.2 Analyze two unsynchronized interleaved threads 371
    20.3 Implement synchronization for two interleaving threads 372
    20.4 Implement a thread pool 374
    20.5 Deadlock 375
    20.6 The readers-writers problem 376
    20.7 The readers-writers problem with write preference 377
    20.8 Implement a Timer class 378
    20.9 Test the Collatz conjecture in parallel 378

III Domain Specific Problems 381

21 Design Problems 382
    21.1 Design a spell checker 384
    21.2 Design a solution to the stemming problen 384
    21.3 Plagiarism detector 385
    21.4 Pair users by attributes 386
    21.5 Design a system for detecting copyright infringemen 387
    21.6 Design TEX 388
    21.7 Design a search engine 389
    21.8 Implement PageRank. 390
    21.9 Design TeraSort and PetaSort 392
    21.10 Implement distributed throttling 392
    21.11 Design a scalable priority system 393
    21.12 Create photomosaics 394
    21.13 Implement Mileage Run 394
    21.14 Implement Connexus. 396
    21.15 Design an online advertising system 397
    21.16 Design a recommendation system 398
    21.17 Design an optimized way of distributing large files 399
    21.18 Design the World Wide Web 400
    21.19 Estimate the hardware cost of a photo sharing app 401

22 Language Questions 402
    22.1 References and Pointers 402
    22.2 PASS-BY-REFERENCE VS. PASS-BY-VALUE 402
    22.3 Smart Pointers 403
    22.4 Iterators 404
    22.5 Constructors 405
    22.5 Default methods 405
    22.7 MALLOC(), FREE (), NEW, DELETE 406
    22.8 Strings 407
    22.9 PUSH_BACK () AND EMPLACE_BACK () 407
    22.10 Updating a map 408
    22.11 Fast function calls 409
    22.12 Template functions 409
    22.13 Run-time type identification 410
    22.14 Dynamic linkage 411

23 Object-Oriented Design 413
    23.1 Template Method vs. Strategy 413
    23.2 Observer pattern 414
    23.3 Push vs. pull observer pattern 414
    23.4 Singletons and Flyweights 415
    23.5 Adapters 416
    23.6 Creational Patterns 417
    23.7 Libraries and design patterns 418

24 Common Tools 420
    24.1 Merging in a version control system 420
    24.2 Hooks 422
    24.3 Is scripting more efficient? 424
    24.4 Polymorphism with a scripting language 424
    24.5 Dependency analysis 425
    24.6 ANT vs. Maven 425
    24.7 SQL vs. NoSQL 426
    24.8 Normalization 427
    24.9 SQL design 428
    24.10 IP, TCP, and HTTP 429
    24.11 HTTPS 430
    24.12 DNS 431

IV The Honors Class 432

25 Honors Class 433
    25.1 Compute the greatest common divisor 434
    25.2 Find the first missing positive entry 435
    25.3 Buy and sell a stock k times 436
    25.4 Compute the maximum product of all entries but one 437
    25.5 Compute the longest contiguous increasing subarray 439
    25.6 Rotate an array 441
    25.7 Identify positions attacked by rooks 443
    25.8 Justify text 444
    25.9 Implement list zipping 446
    25.10 Copy a postings list 447
    25.11 Compute the longest substring with matching parens 449
    25.12 Compute the maximum of a sliding window 450
    25.13 Implement a postorder traversal without recursion 452
    25.14 Compute fair bonuses 454
    25.15 Search a sorted array of unknown length 457
    25.16 Search in two sorted arrays 458
    25.17 Find the kth largest element-large n, small k 459
    25.18 Find an element that appears only once 461
    25.19 Find the line through the most points 462
    25.20 Find the shortest unique prefix 464
    25.21 Find the most visited pages in a window 467
    25.22 Convert a sorted doubly linked list into a BST 468
    25.23 Convert a BST to a sorted doubly linked list 469
    25.24 Merge two BSTs 471
    25.25 The view from above 472
    25.26 Implement regular expression matching 475
    25.27 Synthesize an expression 478
    25.28 Count inversions 481
    25.29 Draw the skyline 482
    25.30 Measure with defective jugs 485
    25.31 Compute the maximum subarray sum in a circular array 486
    25.32 Determine the critical height 488
    25.33 Find the maximum 2D subarray 490
    25.34 Implement Huffman coding 493
    25.35 Trapping water 497
    25.36 Search for a pair-sum in an abs-sorted array 498
    25.37 The heavy hitter problem 501
    25.38 Find the longest subarray whose sum < k 502
    25.39 Road network 504
    25.40 Test if arbitrage is possible 506

V Notation, and Index 508
Notation 509
Index of Terms 511
