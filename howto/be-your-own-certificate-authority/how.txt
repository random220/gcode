https://workaround.org/certificate-authority/

Become your own Certificate Authority

    % /usr/lib/ssl/misc/CA.pl -newca # password Host!

    see typescript-CA-pl--newca.txt for output

    % find demoCA
    demoCA/
    demoCA/crl
    demoCA/cacert.pem
    demoCA/private
    demoCA/private/cakey.pem
    demoCA/careq.pem
    demoCA/certs
    demoCA/crlnumber
    demoCA/newcerts
    demoCA/newcerts/1A3D861D0535DDAB389D08BE3C2B16695A0D5867.pem
    demoCA/serial
    demoCA/index.txt.attr
    demoCA/index.txt.old
    demoCA/index.txt

    Examine private key meta info
    % openssl rsa  -in demoCA/private/cakey.pem -text -noout >a.txt

    Examine certificate meta info
    % openssl x509 -in demoCA/cacert.pem -text -noout >a.txt

    Archive
    % git init
    % git add demoCA
    % git commit -m "$(date)"
    % mkdir om
    % git init --bare om/CA.git
    % git push --mirror om/CA.git



Pretend that you are another business that needs a server certifcate.
Create a key and a certificate request

    % /usr/lib/ssl/misc/CA.pl -newreq # password host
    See typescript-CA-pl--newreq.txt
    That created newkey.pem and newreq.pem

    Create naked server key
    % openssl rsa -in newkey.pem -out newkey.key   # host
    % rm newkey.pem

    Examine the key and the request
    % openssl rsa -in newkey.pem -text -noout
    % openssl req -in newreq.pem -text -noout

    % mkdir om/business
    % mv newkey.key om/business

    Send newreq.pem to the cert authority
    % mkdir tosign
    % mv newreq.pem tosign
    


Become the certificate authority again and sign the incoming cert
   
    % cd tosign
    % git clone ../om/CA.git
    % mv newreq.pem CA
    % cd CA
    % /usr/lib/ssl/misc/CA.pl -sign
    # See typescript-CA-pl--sign.txt

Give it to business
    % mv newcert.pem ../om/business
    % mv newcert.pem ../../om/business/
    % cp demoCA/cacert.pem ../om/business

Archive again
    % rm newreq.pem
    % git add .
    % git commit -m "$(date)"
    % git push

