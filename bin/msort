#!/usr/bin/perl
use strict;
use File::Path;
use File::Path qw(make_path remove_tree);

my $rootdir = $ARGV[0];
if (!-d $rootdir) {
    die "Error: Need a root directory to start working from\n";
}

my $tmpdir = "$rootdir/../___aaa";
if (-d $tmpdir) {
    die "Error: Already exists \"$tmpdir\"\n";
}
make_path($tmpdir);
if (! -d $tmpdir) {
    die "Error: Could not create \"$tmpdir\"\n";
}
rmtree($tmpdir);

cleanup($rootdir);

sub cleanup
{
    my $d = shift;
    my @delete_these = ();
    my @dirs = ();
    my @files = ();

    opendir my $dh, $d or die "dead at $d\n";
    my @things = readdir $dh;
    closedir $dh;
    for my $thing (@things) {
        next if ($thing eq '.');
        next if ($thing eq '..');
        if ($thing =~ /^\._/) {
            push @delete_these, $thing;
        }
        elsif ($thing =~ /DS_Store/) {
            push @delete_these, $thing;
        }
        elsif ($thing eq '___aaa') {
            push @delete_these, $thing;
        }
        elsif (-d "$d/$thing") {
            push @dirs, $thing;
        }
        elsif (-f "$d/$thing") {
            push @files, $thing;
        }
        else {
            print "==> $d/$thing\n";
        }
    }
    for my $delete_this (@delete_these) {
        if(-f "$d/$delete_this") {
            unlink "$d/$delete_this";
        }
        if(-d "$d/$delete_this") {
            rmtree("$d/$delete_this");
        }
    }
    @dirs = sort by_desired_order @dirs;
    @files = sort by_desired_order @files;
    make_path($tmpdir);
    for my $thing (@dirs, @files) {
        rename "$d/$thing", "$tmpdir/$thing";
        print("rename \"$d/$thing\", \"$tmpdir/$thing\"\n");
    }
    for my $thing (@dirs) {
        rename "$tmpdir/$thing", "$d/$thing";
        print("rename \"$tmpdir/$thing\", \"$d/$thing\"\n");
    }
    for my $thing (@files) {
        rename "$tmpdir/$thing", "$d/$thing";
        print("rename \"$tmpdir/$thing\", \"$d/$thing\"\n");
    }
    for my $dir (@dirs) {
        cleanup("$d/$dir");
    }
    rmtree($tmpdir);
}

sub by_desired_order
{
    my $track1 = '';
    my $name1 = '';
    my $track2 = '';
    my $name2 = '';
    my $norm_a = name_normalize($a);
    my $norm_b = name_normalize($b);
    return $norm_a cmp $norm_b;
}

sub name_normalize {
    my $name = shift;
    $name =~ s{^\s*}{}s;
    $name =~ s{\s*$}{}s;
    my $n1 = 0;
    my $n2 = 0;
    my $text = $name;
    my $isdir = 0;
    if ($name =~ m{^(d|cd)\-?(\d+)[\s\-_]+(.+)}i) {
        $n1 = $2;
        $text = $3;
        $isdir = 1;
    }
    elsif($name =~ m{^(\d+)[\s\-_]+(\d+)[\s\-_]+(.+)}) {
        $n1 = $1;
        $n2 = $2;
        $text = $3;
    }
    elsif($name =~ m{^(\d+)[\s\-_]+(.+)}) {
        $n1 = $1;
        $text = $2;
    }
    $n1 = sprintf('%05d', $n1);
    $n2 = sprintf('%05d', $n2);
    my $normname;
    $normname = "$n1$n2$text";
    if ($isdir == 1) {
        $normname = "0000000000$text$n1$n2";
    }
    $normname =~ tr/A-Z/a-z/;
    #print "==> $name||$normname\n";
    return $normname;
}

