#!/bin/bash
umask 077

tmpdir=''
op=enc
# Process options using getopt
while getopts ":t:ed" opt; do
    case "$opt" in
        t)
            tmpdir="$OPTARG"
            ;;
        e)
            op=enc
            ;;
        d)
            op=dec
            ;;
        \?)
            echo "Invalid option: -$OPTARG"
            usage
            ;;
        :)
            echo "Option -$OPTARG requires an argument."
            ;;
    esac
done

# Shift the processed options out of the argument list
shift $((OPTIND - 1))

if [[ "$tmpdir" == '' ]]; then
    tmpdir=$(mktemp -d -t genc-XXXX)
fi
mkdir -p "$tmpdir"
if [[ ! -d "$tmpdir" ]]; then
    echo "No tmpdir \"$tmpdir\""
    exit 1
fi

export op
export tmpdir

main() {
  local infile="$1"
  if [[ "$infile" == '' ]]; then
    echo "Need infile"
    exit 1
  fi

  if [[ "$op" == 'enc' ]]; then
    if [[ -f "$infile" ]]; then
      outfile="${tmpdir}/"$(basename "$infile").gpg
    elif [[ -d "$infile" ]]; then
      local bname=$(basename "$(readlink -f "$infile")")
      outfile="${tmpdir}/$bname".tar.gpg
    else
      echo "File \"$infile\" not found"
      rm -rf "$tmpdir"
      exit 1
    fi
  else
    if [[ -f "$infile" ]]; then
      outfile="${tmpdir}/"$(basename "$infile").plain
    else
      echo "File \"$infile\" not found"
      rm -rf "$tmpdir"
      exit 1
    fi
  fi

  echo -n Password:
  read -s password
  export mypass="$password"

  if [[ "$op" == 'enc' ]]; then
    do_enc_gpg "$infile" "$outfile"
  else
    do_dec_gpg "$infile" "$outfile"
  fi

  echo
  echo
  echo "See"
  find "$tmpdir"
}

do_dec_openssl() {
  local cryptfile="$1"
  local plainfile="$2"
  openssl enc -d -in "$cryptfile" -out "$plainfile" -base64 -aes256 -iter 12 -pass env:mypass
  return $?
}
do_enc_openssl() {
  local plainfile="$1"
  local cryptfile="$2"
  openssl enc -e -in "$plainfile" -out "$cryptfile" -base64 -aes256 -iter 12 -pass env:mypass
  return $?
}
do_enc_gpg() {
  local plainfile="$1"
  local cryptfile="$2"
  rm -f crypt.gpg
  local status
  if [[ -d "$plainfile" ]]; then
    local ind=$(cd "$(dirname "$plainfile")" && pwd -P)
    local bn=$(basename "$plainfile")
    (cd "$ind" && tar cf "$tmpdir/${bn}.tar" "$bn")
    gpg --passphrase-fd 0 --batch -c -o "$tmpdir"/crypt.gpg "$tmpdir/${bn}.tar" <<<"$mypass"
    status=$?
    gpg --passphrase-fd 0 --batch -c -o "$tmpdir"/crypt.gpg.txt -a "$tmpdir/${bn}.tar" <<<"$mypass"
  else
    gpg --passphrase-fd 0 --batch -c -o "$tmpdir"/crypt.gpg "$plainfile" <<<"$mypass"
    status=$?
    gpg --passphrase-fd 0 --batch -c -o "$tmpdir"/crypt.gpg.txt -a "$plainfile" <<<"$mypass"
  fi
  status=$?
  if [[ $status == 0 ]]; then
    mv "$tmpdir"/crypt.gpg "$cryptfile"
    mv "$tmpdir"/crypt.gpg.txt "$cryptfile".txt
  fi
  if [[ -f "$cryptfile" ]]; then
    openssl enc -base64 <"$cryptfile" >"$cryptfile".b64
  fi
  return $status
}
do_dec_gpg() {
  local cryptfile="$1"
  local plainfile="$2"
  local status=0
  if [[ "$cryptfile" =~ \.b64$ ]]; then
    base64 -d <"$cryptfile" >"$tmpdir/a.gpg"
    gpg --passphrase-fd 0 --batch -d -o "$plainfile" "$tmpdir/a.gpg" 2>/dev/null <<<"$mypass"
    status=$?
    rm -f "$tmpdir/a.gpg"
  else
    gpg --passphrase-fd 0 --batch -d -o "$plainfile" "$cryptfile" 2>/dev/null <<<"$mypass"
    status=$?
  fi
  return $status
}

main "$@"
