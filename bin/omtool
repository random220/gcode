#!/usr/bin/perl
use strict;
use Data::Dumper;


my $valid_commands =
{
    'umount' => 1,
    'vmount' => 1,
    'lmount' => 1,
    'tmount' => 1,
    'hmount' => 1,
    'vumount' => 1,
    'humount' => 1,
    'lsync' => 1,
    'tsync' => 1,
    'hsync' => 1,
    'note' => 1,
    'dirs' => 1,
    'vmw' => 1,
};

my $CMD = $ARGV[0];
if (!exists $valid_commands->{$CMD}) {
    print "This command is not implemented yet: \"$CMD\"\n";
    print "Valid commands:\n";
    print Dumper($valid_commands);
    exit 1;
}

if (0) {
}
elsif ($CMD eq 'vmw') {
    # Mount is already done in set_variables
    my @fglobs = ("'/etc/vmware/license-ws-'*",
                  "'/Library/Preferences/VMware Fusion/license-fusion'*"
                 );
    my $winregistry = '[HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\VMware, Inc.\VMware Workstation\License.ws.12.0.e1.201505]';
    for my $fglob (@fglobs) {
        my @f = `ls -1d $fglob 2>/dev/null`;
        if ($? == 0) {
            for my $f (@f) {
                chomp $f;
                my $cmd = "sudo rm -f '$f'";
                system $cmd;
            }
        }
    }

    exit 0;
}

my $cmd;
my $uname = `uname`; chomp $uname;
my ($veracrypt,
    $tiddly_file,
    $p, $l, $t,
    );
set_variables();

if (0) {
}
elsif ($CMD eq 'dirs') {
    # Mount is already done in set_variables
    print "$p/mydata/OM/03-OFFICE/09-juniper/15-Skype\n";
    exit 0;
}
elsif ($CMD eq 'umount') {
    vumount();
    humount();
}
elsif ($CMD eq 'vmount') {
    vmount();
}
elsif ($CMD eq 'lmount') {
    lmount();
}
elsif ($CMD eq 'tmount') {
    tmount();
}
elsif ($CMD eq 'hmount') {
    hmount();
}
elsif ($CMD eq 'vumount') {
    vumount();
}
elsif ($CMD eq 'humount') {
    humount();
}
elsif ($CMD eq 'note') {
    system $ENV{HOME}.'/gcode/bin/vmount';
    if ( ! -f "$p/$tiddly_file") {
        die "Could not find file: $p/$tiddly_file\n";
    }
    if ($uname eq 'Darwin') {
        system "open -a /Applications/Firefox.app '$p/$tiddly_file'";
    }
    elsif ($uname eq 'Linux') {
        system "(/usr/bin/firefox '$p/$tiddly_file'&) 2>/dev/null";
    }
    else {
        die "Don't know how to open tiddly on machines not mac or Linux\n";
    }
    print "\n\nexport p=$p\n";
}
elsif ($CMD eq 'lsync') {
    vmount();
    lmount();
    if (!-d $p or !-d $l) {
        die "At least one of the mounts failed.\n";
    }
    my $cmd = "time rsync -a --delete $p/ $l/";
    print("doing: $cmd\n");
    system($cmd);
    print "\n\nexport p=$p\nexport l=$l\n";
}
elsif ($CMD eq 'tsync') {
    vmount();
    tmount();
    if (!-d $p or !-d $t) {
        die "At least one of the mounts failed.\n";
    }
    my $cmd = "time rsync -a --delete $p/ $t/";
    print("doing: $cmd\n");
    system($cmd);
    print "\n\nexport p=$p\nexport t=$t\n";
}
elsif ($CMD eq 'hsync') {
    vmount();
    hmount();
    $cmd = "rsync -a --delete $p/ om\@crondite.com:/b/om/p/CRUZER/";
    print("doing: $cmd\n");
    system($cmd);
}

sub set_variables
{
    $p="/b/om/p/CRUZER";
    $l="/b/om/l/CRUZER";
    $t="/b/om/t/CRUZER";

    $tiddly_file="gitted/sandbox/tiddly.html";
    $veracrypt = $ENV{HOME}.'/bin/veracrypt';
    if (!-f $veracrypt) {
        die "Error: $veracrypt is not a file\n"
          . "Please softlink to /Applications/VeraCrypt.app/Contents/MacOS/VeraCrypt for mac\n"
          . "or /usr/bin/veracrypt for Linux\n"
          ;
    }
}

sub nowtime
{
    my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) =
                                                 localtime(time);
    $year += 1900;
    $mon  += 1;
    ($mon) = "00$mon" =~ m{(..)$};
    ($mday) = "00$mday" =~ m{(..)$};
    ($hour) = "00$hour" =~ m{(..)$};
    ($min) = "00$min" =~ m{(..)$};
    ($sec) = "00$sec" =~ m{(..)$};
    return "${year}-${mon}-${mday}-${hour}${min}${sec}";
}

sub vmount
{
    system $ENV{HOME}.'/gcode/bin/vmount';
}

sub vumount
{
    system $ENV{HOME}.'/gcode/bin/vumount';
}

sub lmount {
    system $ENV{HOME}.'/gcode/bin/lmount';
}

sub tmount {
    system $ENV{HOME}.'/gcode/bin/tmount';
}

sub hmount {
    system 'ssh -t om@crondite.com gcode/bin/vmount';
}

sub humount {
    system 'ssh -t om@crondite.com gcode/bin/vumount';
}

