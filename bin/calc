#!/usr/bin/env python
import sys
import re
import math

class G:
    stack = []
    mode = 'DEG'


def calc(line):
    args = re.split(r'\s+', line)
    for arg in args:
        if re_match(r'^([+-]?)([\d\.]+)$', arg):
            n = float(G.m.group(2))
            if G.m.group(1) == '-':
                n = 0 - n
            G.stack.append(n)
        elif arg == 'pi':
            n = math.pi
            G.stack.append(n)
        elif arg == 'e':
            n = math.e
            G.stack.append(n)
        else:
            op(arg)

def op(arg):
    if  arg == '+':
        b = G.stack.pop()
        a = G.stack.pop()
        G.stack.append(a+b)
    elif  arg == '-':
        b = G.stack.pop()
        a = G.stack.pop()
        G.stack.append(a-b)
    elif  arg == '*':
        b = G.stack.pop()
        a = G.stack.pop()
        G.stack.append(a*b)
    elif  arg == '/':
        b = G.stack.pop()
        a = G.stack.pop()
        G.stack.append(a/b)
    elif  arg == '%':
        b = G.stack.pop()
        a = G.stack.pop()
        a = int(a)
        b = int(b)
        G.stack.append(a % b)
    elif  arg == '1/' or  arg == 'inv':
        a = G.stack.pop()
        G.stack.append(1/a)
    elif  arg == 'neg' or  arg == '0-':
        a = G.stack.pop()
        G.stack.append(0 - a)
    elif  arg == 'sq':
        a = G.stack.pop()
        G.stack.append(a*a)
    elif  arg == 'sqrt':
        a = G.stack.pop()
        G.stack.append(match.sqrt(a))
    elif  arg == '^':
        b = G.stack.pop()
        a = G.stack.pop()
        G.stack.append(math.pow(a, b))
    elif  arg == 'log':
        a = G.stack.pop()
        G.stack.append(math.log10(a))
    elif  arg == 'ln':
        a = G.stack.pop()
        G.stack.append(math.log(a))
    elif  arg == 'log2':
        b = G.stack.pop()
        a = G.stack.pop()
        G.stack.append(math.log(b) / math.log(a))
    elif  arg == 'rad':
        G.mode = 'RAD'
    elif  arg == 'deg':
        G.mode = 'DEG'
    elif  arg == 'grad':
        G.mode = 'GRAD'
    elif  arg == 'sin':
        a = G.stack.pop()
        if G.mode == 'DEG':
            a = math.pi * a / 180
        elif G.mode == 'GRAD':
            a = math.pi * a / 200 
        G.stack.append(math.sin(a))
    elif  arg == 'cos':
        a = G.stack.pop()
        if G.mode == 'DEG':
            a = math.pi * a / 180
        elif G.mode == 'GRAD':
            a = math.pi * a / 200 
        G.stack.append(math.cos(a))
    elif  arg == 'tan':
        a = G.stack.pop()
        if G.mode == 'DEG':
            a = math.pi * a / 180
        elif G.mode == 'GRAD':
            a = math.pi * a / 200 
        G.stack.append(math.tan(a))
    elif  arg == 'asin':
        a = G.stack.pop()
        a = math.asin(a)
        if G.mode == 'DEG':
            a = a * 180 / math.pi
        elif G.mode == 'GRAD':
            a = a * 200 / math.pi
        G.stack.append(a)
    elif  arg == 'acos':
        a = G.stack.pop()
        a = math.acos(a)
        if G.mode == 'DEG':
            a = a * 180 / math.pi
        elif G.mode == 'GRAD':
            a = a * 200 / math.pi
        G.stack.append(a)
    elif  arg == 'atan':
        a = G.stack.pop()
        a = math.atan(a)
        if G.mode == 'DEG':
            a = a * 180 / math.pi
        elif G.mode == 'GRAD':
            a = a * 200 / math.pi
        G.stack.append(a)
    elif  arg == 'pop':
        G.stack.pop()
    elif  arg == 'c':
        G.stack = []
    elif  arg == 'x':
        b = G.stack.pop()
        a = G.stack.pop()
        G.stack.append(b)
        G.stack.append(a)

def print_stack():
    print('    ---{mode}---'.format(mode=G.mode))
    n = 0
    for i in G.stack:
        print('    {n}: {i}'.format(n=n, i=i))
        n += 1

def re_match(rex, line):
    G.m = re.search(rex, line)
    if G.m:
        return True
    return False
        

while True:
    line = raw_input('>>> ')
    calc(line)
    print_stack()

