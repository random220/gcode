#!/usr/bin/env python3
import sys
import re
import math

class G:
    stack = []
    mode = 'DEG'
    S = {}
    num = 0


def main():
    if len(sys.argv) > 1:
        line = ' '.join(sys.argv[1:])
        calc(line)
        if len(G.stack) == 1:
            print(G.stack[0])
        else:
            print_all()
    else:
        while True:
            try:
                line = input('>>> ')
            except:
                sys.exit(0)
            calc(line)
            print_all()

def calc(line):
    args = re.split(r'\s+', line)
    for arg in args:
        if arg == '.':
            sys.exit(0)
        elif tonum(arg):    # is it a number ?
            G.stack.append(G.num)
        elif re_match(r'(.*)>(.+)', arg):  # Is it a variable to be saved?
            n = G.m.group(1)
            v = G.m.group(2)
            if re_match(r'^(.+)\-$', v):   # Is this a variable to be deleted ?
                v = G.m.group(1)
                if v in G.S:
                    del G.S[v]
            else:
                if n == '':
                    G.S[v] = G.stack[-1]
                else:
                    if tonum(n):
                        G.S[v] = G.num
        elif re_match(r'^<(.+)', arg):  # Is it a named variable being recalled?
            if G.m.group(1) in G.S:
                G.stack.append(G.S[G.m.group(1)])
        elif arg == 'pi':
            n = math.pi
            G.stack.append(n)
        elif arg == 'e':
            n = math.e
            G.stack.append(n)
        elif arg == 'G':             # Gravitational constant 6.67408 x 10-11 m3 kg-1 s-2
            n = 6.67408e-11
            G.stack.append(n)
        else:
            op(arg)

def tonum(arg):           
    if re_match(r'^([+-]?)([\d\.,]+)([kmgKMG]?)(e([+-]?)(\d+))?$', arg):    # is it a number ?
        n = G.m.group(2)
        n = n.replace(',','') # remove commas
        n = float(n)
        power = G.m.group(3)
        expo = G.m.group(4)
        exposign = G.m.group(5)
        exponum = G.m.group(6)
        if G.m.group(1) == '-':
            n = 0 - n
        if power == 'k' or power == 'K':
            n = n * 1000
        elif power == 'm' or power == 'M':
            n = n * 1000000
        elif power == 'g' or power == 'G':
            n = n * 1000000000
        if expo is not None:
            exponum = float(exponum)
            if exposign == '-':
                exponum = 0-exponum
            n = n * math.pow(10, exponum)
        G.num = n
        return True
    return False


def op(arg):
    if  arg == '+':
        ans = 0
        ans += G.stack.pop()
        ans += G.stack.pop()
        G.stack.append(ans)
    elif  arg == 'sum':
        ans = 0 
        while len(G.stack) > 0:
            ans += G.stack.pop()
        G.stack.append(ans)
    elif  arg == '-':
        b = G.stack.pop()
        a = G.stack.pop()
        G.stack.append(a-b)
    elif  re_match(r'^\*(.+)\+$', arg):  # *34+ ?
        n = G.m.group(1)
        if tonum(n):
            x = G.num
            n = len(G.stack)
            while n > 0:
                G.stack[n-1] = G.stack[n-1] + x
                n -= 1
    elif  re_match(r'^\*(.+)\-$', arg):  # *34- ?
        n = G.m.group(1)
        if tonum(n):
            x = G.num
            n = len(G.stack)
            while n > 0:
                G.stack[n-1] = G.stack[n-1] - x
                n -= 1
    elif  re_match(r'^\*(.+)\*$', arg):  # *34* ?
        n = G.m.group(1)
        if tonum(n):
            x = G.num
            n = len(G.stack)
            while n > 0:
                G.stack[n-1] = G.stack[n-1] * x
                n -= 1
    elif  re_match(r'^\*(.+)/$', arg):  # *34/ ?
        n = G.m.group(1)
        if tonum(n):
            x = G.num
            n = len(G.stack)
            while n > 0:
                G.stack[n-1] = G.stack[n-1] / x
                n -= 1
    elif  arg == '*sin':
        n = len(G.stack)
        while n > 0:
            mysin(n-1)
            n -= 1
    elif  arg == '*cos':
        n = len(G.stack)
        while n > 0:
            mycos(n-1)
            n -= 1
    elif  arg == '*tan':
        n = len(G.stack)
        while n > 0:
            mytan(n-1)
            n -= 1
    elif  arg == '*asin':
        n = len(G.stack)
        while n > 0:
            myasin(n-1)
            n -= 1
    elif  arg == '*acos':
        n = len(G.stack)
        while n > 0:
            myacos(n-1)
            n -= 1
    elif  arg == '*atan':
        n = len(G.stack)
        while n > 0:
            myatan(n-1)
            n -= 1
    elif  arg == '*sq':
        n = len(G.stack)
        while n > 0:
            G.stack[n-1] = G.stack[n-1] * G.stack[n-1]
            n -= 1
    elif  arg == '*sqrt':
        n = len(G.stack)
        while n > 0:
            G.stack[n-1] = math.sqrt(G.stack[n-1])
            n -= 1
    elif  arg == '*':
        b = G.stack.pop()
        a = G.stack.pop()
        G.stack.append(a*b)
    elif  arg == 'mul':
        ans = 1 
        while len(G.stack) > 0:
            ans *= G.stack.pop()
        G.stack.append(ans)
    elif  arg == '/':
        b = G.stack.pop()
        a = G.stack.pop()
        G.stack.append(a/b)
    elif  arg == '%':
        b = G.stack.pop()
        a = G.stack.pop()
        a = int(a)
        b = int(b)
        G.stack.append(a % b)
    elif  arg == 'inv':
        a = G.stack.pop()
        G.stack.append(1/a)
    elif  arg == '*inv':
        n = len(G.stack)
        while n>0:
            G.stack[n-1] = 1 / G.stack[n-1]
            n -= 1
    elif  re_match(r'^(.+)([\+\-\*/])$', arg):
        n = G.m.group(1)
        thisop = G.m.group(2)
        if tonum(n):
            a = G.num
            b = G.stack.pop()
            if thisop == '+':
                G.stack.append(a+b)
            elif thisop == '-':
                G.stack.append(a-b)
            elif thisop == '*':
                G.stack.append(a*b)
            elif thisop == '/':
                G.stack.append(a/b)
        else:
            # ignore
            pass
    elif  arg == 'neg' or  arg == '0-':
        a = G.stack.pop()
        G.stack.append(0 - a)
    elif  arg == 'sq':
        a = G.stack.pop()
        G.stack.append(a*a)
    elif  arg == 'sqrt':
        a = G.stack.pop()
        G.stack.append(math.sqrt(a))
    elif  arg == '^':
        b = G.stack.pop()
        a = G.stack.pop()
        G.stack.append(math.pow(a, b))
    elif  arg == 'log':
        a = G.stack.pop()
        G.stack.append(math.log10(a))
    elif  arg == 'ln':
        a = G.stack.pop()
        G.stack.append(math.log(a))
    elif  arg == 'log2' or arg == 'logb':
        b = G.stack.pop()
        a = G.stack.pop()
        G.stack.append(math.log(b, a))
    elif  arg == 'rad':
        G.mode = 'RAD'
    elif  arg == 'deg':
        G.mode = 'DEG'
    elif  arg == 'grad':
        G.mode = 'GRAD'

    elif  arg == 'sin':
        mysin(-1)
    elif  arg == 'cos':
        mycos(-1)
    elif  arg == 'tan':
        mytan(-1)
    elif  arg == 'asin':
        myasin(-1)
    elif  arg == 'acos':
        myacos(-1)
    elif  arg == 'atan':
        myatan(-1)
    elif  arg == 'pop' or arg == 'p':
        G.stack.pop()
    elif  arg == 'clr' or arg == 'c':
        G.stack = []
    elif  arg == 'x':
        b = G.stack.pop()
        a = G.stack.pop()
        G.stack.append(b)
        G.stack.append(a)
    elif  arg == 'm':
        print_all()
    elif  arg == 'mc':
        G.S = {}
    else:
        if arg == '':
            pass
        else:
            print('IGNORED: {arg}'.format(arg=arg))

def rad2a(a):
    if G.mode == 'RAD':
        return a
    if G.mode == 'DEG':
        return 180 * a / math.pi
    if G.mode == 'GRAD':
        return 200 * a / math.pi
def a2rad(a):
    if G.mode == 'RAD':
        return a
    if G.mode == 'DEG':
        return math.pi * a / 180
    if G.mode == 'GRAD':
        return math.pi * a / 200
def mysin(i):
    a = a2rad(G.stack[i])
    G.stack[i] = math.sin(a)
def mycos(i):
    a = a2rad(G.stack[i])
    G.stack[i] = math.cos(a)
def mytan(i):
    a = a2rad(G.stack[i])
    G.stack[i] = math.tan(a)
def myasin(i):
    a = G.stack[i]
    a = math.asin(a)
    a = rad2a(a)
    G.stack[i] = a
def myacos(i):
    a = G.stack[i]
    a = math.acos(a)
    a = rad2a(a)
    G.stack[i] = a
def myatan(i):
    a = G.stack[i]
    a = math.atan(a)
    a = rad2a(a)
    G.stack[i] = a

def print_all():
    print('    ---{mode}---'.format(mode=G.mode))

    print('    ---Memory---')
    for key in sorted(G.S.keys()):
        print('    {key}: {val}'.format(key=key, val=G.S[key]))

    print('    ---Stack---')
    n = 0
    for i in G.stack:
        print('    {n}: {i}'.format(n=n, i=i))
        n += 1

def re_match(rex, line):
    G.m = re.search(rex, line)
    if G.m:
        return True
    return False
        
main()
