#!/bin/bash

dockerimage_0000='rockylinux:9.2.20230513'
dockerimage_mine=gmyrocky
dockerimage_temp=gmyrocky_$$
cont_name=grl
mydir=$(cd "$(dirname "$0")" && pwd -P)

if [[ $1 == '0' ]]; then
  docker rm -f $cont_name
  docker rmi -f $dockerimage_mine
fi

function main() {
  container_exists
  if [[ $? == 0 ]]; then
    docker start $cont_name
    docker exec -it $cont_name bash
  else
    local id=$(docker images -q -f reference=$dockerimage_mine)
    # % docker images -q -f reference=$dockerimage_mine
    # 4c3ca26c69c2

    if [[ $id == '' ]]; then
      mkimage
    fi
    mkcont
    echo
    echo
    echo docker exec -it $cont_name bash
  fi
}

mkcont() {
  docker run -itd --name $cont_name -h $cont_name $dockerimage_mine bash
  (
  cd
  tar cfz - .ssh gcode sb/work | docker exec -u root -i $cont_name bash -c 'cd /home/om && tar xfz -; chown -R om:om .'
  )
  cat <<'EOF' | docker exec -u om -i $cont_name bash -
nah () {
  git reset --hard
  git clean -df
  if [ -d ".git/rebase-apply" ] || [ -d ".git/rebase-merge" ]; then
    git rebase --abort
  fi
}

if [[ -d ~/gcode ]]; then
  cd ~/gcode
  nah
fi
if [[ -d ~/sb/work ]]; then
  cd ~/sb/work
  nah
fi

cd
if [[ -f ~/gcode/bin/gcode.0 ]]; then
  bash ~/gcode/bin/gcode.0
fi

mkdir ~/.local
cd ~/.local
if [[ -f ~/sb/work/.local/.bashrc ]]; then
  ln -s ~/sb/work/.local/.bashrc
fi
EOF
}

mkcont0() {
  docker run -itd --name $cont_name -h $cont_name $dockerimage_0000 bash
  #docker cp "$mydir"/../conf/certs/ $cont_name:/tmp/
  cat <<'EOF' |docker exec -i $cont_name bash -
#cp /tmp/certs/* /etc/pki/ca-trust/source/anchors/
#update-ca-trust
#rm -rf /tmp/certs
yum -y update
yum -y --allowerasing install tzdata sudo vim curl wget tmux git perl python3 python3-pip make gcc nc rsync procps-ng strace
ln -sf /usr/share/zoneinfo/EST5EDT /etc/localtime
useradd -s /bin/bash -m om
echo 'om ALL=(ALL) NOPASSWD: ALL' >/etc/sudoers.d/om
EOF

}

mkimage() {
  mkcont0
  docker stop $cont_name
  docker export $cont_name | docker import - $dockerimage_temp
  d=$(mktemp -d)

  (
  cd "$d"
    cat <<EOF >Dockerfile
FROM $dockerimage_temp
USER om
WORKDIR /home/om
EOF
    docker build -t $dockerimage_mine .
  )

  rm -rf "$d"
  docker rm -f $cont_name
  docker rmi -f $dockerimage_temp
}

container_exists() {
  local id=$(docker ps -aqf name=${cont_name}'$')
  if [[ $id != '' ]]; then
    # exists
    return 0
  fi
  return 1
}

main
